{"version":3,"sources":["Assets/logo.png","Header/Header.jsx","SortingAlgorithms/Algorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["Header","state","isDropDownActive","selectedText","selectedId","algorithmList","id","title","arraySizeChanged","e","props","bind","target","value","mouseOverSelectBox","setState","mouseOutSelectBox","algorithmSelected","algorithmChanged","playAndPauseClicked","setTo","className","src","logo","type","min","max","defaultValue","step","this","sliderMin","sliderMax","sliderDefault","onInput","onMouseOver","onMouseOut","map","option","onClick","name","htmlFor","isPlaying","Component","getMergeSortAnimation","array","startIndex","size","animations","leftArraySize","Math","floor","rightArraySize","merge","tempArr","copied","leftCopied","rightCopied","push","i","length","SortingVisualizer","animationStartingIndex","timers","playSpeed","segmentSize","myRef","React","createRef","setUp","prevProps","arrayLength","completion","window","clearTimeout","pop","d3","attr","svgWidth","svgHeight","barPadding","barPaddingMultiplier","barWidth","randomNum","barHeightMin","barHeightMax","bars","document","querySelectorAll","style","fill","j","temp","getBubbleSortAnimation","slice","getAnimation","console","log","startPlay","pausePlay","playBubble","playMerge","beginIndex","bar1Index","bar2Index","bar1","bar2","color","setTimeout","newHeight","setAttribute","isSwap","index","bar1Height","getAttribute","bar2Height","width","svgMargins","height","margin","y","transform","random","App","innerWidth","parseInt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12a5824a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6fa16238.png\";","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport logo from \"../Assets/logo.png\";\nimport PropTypes from \"prop-types\";\n\nexport default class Header extends Component {\n  state = {\n    isDropDownActive: false,\n    selectedText: \"Merge Sort\",\n    selectedId: \"0\",\n    algorithmList: [\n      {\n        id: \"0\",\n        title: \"Merge Sort\",\n      },\n      {\n        id: \"1\",\n        title: \"Quick Sort\",\n      },\n      {\n        id: \"2\",\n        title: \"Bubble Sort\",\n      },\n      {\n        id: \"3\",\n        title: \"Insertion Sort\",\n      },\n    ],\n  };\n\n  arraySizeChanged = (e) => {\n    this.props.arraySizeChanged.bind(this, e.target.value)();\n  };\n\n  mouseOverSelectBox = (e) => {\n    this.setState({ isDropDownActive: true });\n  };\n\n  mouseOutSelectBox = (e) => {\n    this.setState({ isDropDownActive: false });\n  };\n\n  algorithmSelected = (title, id) => {\n    this.setState({\n      selectedText: title,\n      selectedId: id,\n      isDropDownActive: false,\n    });\n    this.props.algorithmChanged.bind(this, id)();\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.props.playAndPauseClicked.bind(this, setTo)();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"logo\">\n          <img id=\"logoGif\" src={logo} />\n        </div>\n        <div className=\"controls\">\n          <div className=\"speed-control\">\n            <div className=\"title\">Sorting Speed</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                step=\"1\"\n              />\n            </div>\n          </div>\n          <div className=\"size-control\">\n            <div className=\"title\">Array Size</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min={this.props.sliderMin}\n                max={this.props.sliderMax}\n                defaultValue={this.props.sliderDefault}\n                step=\"1\"\n                onInput={this.arraySizeChanged}\n              />\n            </div>\n          </div>\n          <div className=\"algorithm-control\">\n            <div\n              className=\"select-box\"\n              onMouseOver={this.mouseOverSelectBox}\n              onMouseOut={this.mouseOutSelectBox}\n            >\n              <div\n                className={\n                  this.state.isDropDownActive\n                    ? \"options-container active\"\n                    : \"options-container\"\n                }\n              >\n                {this.state.algorithmList.map((option) => (\n                  <div\n                    key={option.id}\n                    className=\"option\"\n                    onClick={this.algorithmSelected.bind(\n                      this,\n                      option.title,\n                      option.id\n                    )}\n                  >\n                    <input\n                      type=\"radio\"\n                      className=\"radio\"\n                      id={option.id}\n                      name=\"category\"\n                    />\n                    <label htmlFor={option.id}>{option.title}</label>\n                  </div>\n                ))}\n              </div>\n              <div className=\"selected\">{this.state.selectedText}</div>\n            </div>\n          </div>\n          <button\n            className={this.props.isPlaying ? \"button playing\" : \"button\"}\n            onClick={this.playAndPauseClicked.bind(this, !this.props.isPlaying)}\n          ></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  arraySizeChanged: PropTypes.func.isRequired,\n  algorithmChanged: PropTypes.func.isRequired,\n  sliderMax: PropTypes.number.isRequired,\n  sliderMin: PropTypes.number.isRequired,\n  sliderDefault: PropTypes.number.isRequired,\n  playAndPauseClicked: PropTypes.func.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n};\n","// Merge Sort\nexport function getMergeSortAnimation(array, startIndex, size, animations) {\n  if (size > 1) {\n    const leftArraySize = Math.floor(size / 2);\n    const rightArraySize = size - leftArraySize;\n\n    getMergeSortAnimation(array, startIndex, leftArraySize, animations);\n    getMergeSortAnimation(\n      array,\n      startIndex + leftArraySize,\n      rightArraySize,\n      animations\n    );\n    merge(array, startIndex, leftArraySize, rightArraySize, animations);\n  }\n}\n\nconst merge = (\n  array,\n  startIndex,\n  leftArraySize,\n  rightArraySize,\n  animations\n) => {\n  var tempArr = [];\n  var copied = 0;\n  var leftCopied = 0;\n  var rightCopied = 0;\n\n  while (leftCopied < leftArraySize && rightCopied < rightArraySize) {\n    // Add comparison animation\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    if (\n      array[startIndex + leftCopied] <\n      array[startIndex + leftArraySize + rightCopied]\n    ) {\n      // Add override animation\n      animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n      tempArr[copied++] = array[startIndex + leftCopied++];\n    } else {\n      // Add override animation\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftArraySize + rightCopied],\n      ]);\n      tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n    }\n  }\n\n  while (leftCopied < leftArraySize) {\n    animations.push([startIndex + leftCopied, startIndex + leftCopied]);\n    animations.push([startIndex + leftCopied, startIndex + leftCopied]);\n    animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n    tempArr[copied++] = array[startIndex + leftCopied++];\n  }\n\n  while (rightCopied < rightArraySize) {\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftArraySize + rightCopied],\n    ]);\n    tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n  }\n\n  for (let i = 0; i < tempArr.length; i++) {\n    array[i + startIndex] = tempArr[i];\n  }\n};\n\n// Bubble Sort\nexport function getBubbleSortAnimation(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        const temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animations.push([true, j]);\n        animations.push([true, j]);\n        animations.push([true, j]);\n      } else {\n        animations.push([false, j]);\n        animations.push([false, j]);\n        animations.push([false, j]);\n      }\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {\n  getMergeSortAnimation,\n  getBubbleSortAnimation,\n} from \"../SortingAlgorithms/Algorithms.js\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nexport default class SortingVisualizer extends Component {\n  state = {\n    array: [],\n    animations: [],\n    animationStartingIndex: 0,\n    timers: [],\n    playSpeed: 25,\n    segmentSize: 10,\n  };\n\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setUp();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.arrayLength !== this.props.arrayLength) {\n      this.setUp();\n    }\n    if (prevProps.isPlaying !== this.props.isPlaying) {\n      this.playAndPauseClicked(this.props.isPlaying);\n    }\n    if (prevProps.algorithmSelected !== this.props.algorithmSelected) {\n      this.setUp();\n    }\n  }\n\n  setUp(completion = null) {\n    // clean up timers\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n\n    // set svg frame\n    d3.select(\"svg\")\n      .attr(\"width\", this.props.svgWidth)\n      .attr(\"height\", this.props.svgHeight);\n\n    // calculate bar parameters\n    this.setState({\n      barPadding:\n        (this.props.svgWidth / this.props.arrayLength) *\n        this.props.barPaddingMultiplier,\n      barWidth:\n        (this.props.svgWidth / this.props.arrayLength) *\n        (1 - this.props.barPaddingMultiplier),\n    });\n\n    // get random array\n    const array = [];\n    for (let i = 0; i < this.props.arrayLength; i++) {\n      array.push(randomNum(this.props.barHeightMin, this.props.barHeightMax));\n    }\n\n    // set array and clean up\n    this.setState(\n      {\n        array: array,\n        animations: [],\n        animationStartingIndex: 0,\n        timers: [],\n      },\n      completion\n    );\n\n    // clean up bar color\n    const bars = document.querySelectorAll(\"rect\");\n    for (let i = 0; i < bars.length; i++) {\n      bars[i].style.fill = \"rgb(78, 169, 255)\";\n    }\n  }\n\n  getAnimation() {\n    if (this.props.algorithmSelected === \"2\") {\n      getBubbleSortAnimation(this.state.array.slice(), this.state.animations);\n    } else {\n      getMergeSortAnimation(\n        this.state.array.slice(),\n        0,\n        this.state.array.length,\n        this.state.animations\n      );\n    }\n  }\n\n  playAndPauseClicked(isPlaying) {\n    if (isPlaying) {\n      // Check if the animation is created already\n      if (this.state.animations.length === 0) {\n        // make animations\n        this.getAnimation();\n      } else {\n        // Sorting was paused\n        // If the sorting ended, restart\n        if (this.state.animationStartingIndex == this.state.animations.length) {\n          this.setUp(() => {\n            this.getAnimation();\n            console.log(this.state.animations);\n            // start sorting\n            this.startPlay();\n          });\n        }\n      }\n      // start sorting\n      this.startPlay();\n    } else {\n      // pause sort\n      this.pausePlay();\n    }\n  }\n\n  startPlay() {\n    if (this.props.algorithmSelected === \"2\") {\n      this.playBubble();\n    } else {\n      this.playMerge();\n    }\n  }\n\n  pausePlay() {\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n  }\n\n  playMerge() {\n    // Start from where it left off\n    const beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      const bars = document.querySelectorAll(\"rect\");\n      const isComparison = i % 3 !== 2;\n      if (isComparison) {\n        const [bar1Index, bar2Index] = this.state.animations[i];\n        const bar1 = bars[bar1Index];\n        const bar2 = bars[bar2Index];\n        const color = i % 3 === 0 ? \"red\" : \"rgb(78, 169, 255)\";\n        this.state.timers.push(\n          setTimeout(() => {\n            bar1.style.fill = color;\n            bar2.style.fill = color;\n            this.state.animationStartingIndex++;\n            if (i >= this.state.segmentSize + beginIndex - 1) {\n              this.playMerge();\n            }\n          }, (i - beginIndex) * this.state.playSpeed)\n        );\n      } else {\n        this.state.timers.push(\n          setTimeout(() => {\n            const [bar1Index, newHeight] = this.state.animations[i];\n            const bar1 = bars[bar1Index];\n            bar1.setAttribute(\"height\", newHeight);\n            bar1.setAttribute(\"y\", this.props.svgHeight - newHeight);\n            this.state.animationStartingIndex++;\n            if (\n              this.state.animationStartingIndex >= this.state.animations.length\n            ) {\n              this.props.pausePlay();\n            } else if (i >= this.state.segmentSize + beginIndex - 1) {\n              this.playMerge();\n            }\n          }, (i - beginIndex) * this.state.playSpeed)\n        );\n      }\n    }\n  }\n\n  playBubble() {\n    let beginIndex = this.state.animationStartingIndex;\n    console.log(beginIndex);\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      const [isSwap, index] = this.state.animations[i];\n      const bars = document.querySelectorAll(\"rect\");\n      const bar1 = bars[index];\n      const bar2 = bars[index + 1];\n      if (i % 3 === 0) {\n        this.state.timers.push(\n          setTimeout(() => {\n            console.log(\"here1\");\n            bar1.style.fill = \"red\";\n            bar2.style.fill = \"red\";\n            this.state.animationStartingIndex++;\n            if (i >= this.state.segmentSize + beginIndex - 1) {\n              this.playBubble();\n            }\n          }, (i - beginIndex + 1) * this.state.playSpeed)\n        );\n      } else if (i % 3 === 1) {\n        this.state.timers.push(\n          setTimeout(() => {\n            console.log(\"here2\");\n            if (isSwap) {\n              const bar1Height = bar1.getAttribute(\"height\");\n              const bar2Height = bar2.getAttribute(\"height\");\n              bar1.setAttribute(\"height\", bar2Height);\n              bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n              bar2.setAttribute(\"height\", bar1Height);\n              bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n            } else {\n              bar1.style.fill = \"green\";\n              bar2.style.fill = \"green\";\n            }\n            this.state.animationStartingIndex++;\n            if (i >= this.state.segmentSize + beginIndex - 1) {\n              this.playBubble();\n            }\n          }, (i - beginIndex + 1) * this.state.playSpeed)\n        );\n      } else {\n        this.state.timers.push(\n          setTimeout(() => {\n            console.log(\"here3\");\n            bar1.style.fill = \"rgb(78, 169, 255)\";\n            bar2.style.fill = \"rgb(78, 169, 255)\";\n            this.state.animationStartingIndex++;\n            if (\n              this.state.animationStartingIndex >= this.state.animations.length\n            ) {\n              this.props.pausePlay();\n            } else if (i >= this.state.segmentSize + beginIndex - 1) {\n              this.playBubble();\n            }\n          }, (i - beginIndex + 1) * this.state.playSpeed)\n        );\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"arrayContainer\"\n          style={{\n            width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n          }}\n        >\n          <div\n            className=\"barContainer\"\n            style={{\n              width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n              height: this.props.svgHeight + this.props.svgMargins * 2 + \"px\",\n            }}\n          >\n            <svg\n              id=\"svg\"\n              style={{\n                margin: this.props.svgMargins + \"px\",\n              }}\n            >\n              {this.state.array.map((value, index) => (\n                <rect\n                  key={index}\n                  y={this.props.svgHeight - value}\n                  height={value}\n                  width={this.state.barWidth}\n                  transform={\n                    \"translate(\" +\n                    [(this.state.barWidth + this.state.barPadding) * index, 0] +\n                    \")\"\n                  }\n                ></rect>\n              ))}\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSortingVisualizer.propTypes = {\n  svgWidth: PropTypes.number.isRequired,\n  svgHeight: PropTypes.number.isRequired,\n  svgMargins: PropTypes.number.isRequired,\n  barHeightMin: PropTypes.number.isRequired,\n  barHeightMax: PropTypes.number.isRequired,\n  barPaddingMultiplier: PropTypes.number.isRequired,\n  arrayLength: PropTypes.number.isRequired,\n  algorithmSelected: PropTypes.string.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n  pausePlay: PropTypes.func.isRequired,\n};\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nconst svgHeight = 400;\nconst svgMargins = 15;\nconst barHeightMin = 5;\nconst barHeightMax = svgHeight - 15;\nconst barPaddingMultiplier = 1 / 5;\nconst barMinWidth = 5;\n\nexport default class App extends Component {\n  state = {\n    svgWidth: window.innerWidth - 100,\n    sliderMax: [window.innerWidth - 100] / barMinWidth,\n    sliderMin: 10,\n    arrayLength: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 3\n    ),\n    sliderDefault: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 3\n    ),\n    isPlaying: false,\n    algorithmSelected: \"0\",\n  };\n\n  arraySizeChanged = (size) => {\n    this.pausePlay();\n    this.setState({\n      arrayLength: parseInt(size),\n    });\n  };\n\n  algorithmChanged = (id) => {\n    if (id !== this.state.algorithmSelected) {\n      this.setState({\n        algorithmSelected: id,\n        isPlaying: false,\n      });\n    }\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.setState({\n      isPlaying: setTo,\n    });\n  };\n\n  pausePlay = () => {\n    this.setState({\n      isPlaying: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          arraySizeChanged={this.arraySizeChanged}\n          algorithmChanged={this.algorithmChanged}\n          sliderMax={this.state.sliderMax}\n          sliderMin={this.state.sliderMin}\n          sliderDefault={this.state.sliderDefault}\n          playAndPauseClicked={this.playAndPauseClicked}\n          isPlaying={this.state.isPlaying}\n        />\n        <SortingVisualizer\n          svgWidth={this.state.svgWidth}\n          svgHeight={svgHeight}\n          svgMargins={svgMargins}\n          barHeightMin={barHeightMin}\n          barHeightMax={barHeightMax}\n          barPaddingMultiplier={barPaddingMultiplier}\n          arrayLength={this.state.arrayLength}\n          algorithmSelected={this.state.algorithmSelected}\n          isPlaying={this.state.isPlaying}\n          pausePlay={this.pausePlay}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n    <React.StrictMode>\n    <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n); "],"sourceRoot":""}