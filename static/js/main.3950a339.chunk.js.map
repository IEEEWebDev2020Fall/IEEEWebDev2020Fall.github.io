{"version":3,"sources":["Assets/logo.png","Header/Header.jsx","SortingAlgorithms/Algorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["Header","state","isDropDownActive","selectedText","selectedId","algorithmList","id","title","arraySizeChanged","e","props","bind","target","value","sortingSpeedChanged","mouseOverSelectBox","setState","mouseOutSelectBox","algorithmSelected","algorithmChanged","playAndPauseClicked","setTo","className","src","logo","type","min","max","this","speedSliderStepsCount","defaultValue","speedSliderDefault","step","onInput","sliderMin","sliderMax","sizeSliderDefault","onMouseOver","onMouseOut","map","option","onClick","name","htmlFor","isPlaying","Component","getMergeSortAnimation","array","startIndex","size","animations","leftArraySize","Math","floor","rightArraySize","merge","tempArr","copied","leftCopied","rightCopied","push","i","length","SortingVisualizer","animationStartingIndex","timers","segmentSize","barDefaultColor","barCompareColor","barComparePassedColor","barHighlightColor","myRef","React","createRef","setUp","prevProps","arrayLength","sortingSpeed","pausePlay","startPlay","completion","window","clearTimeout","pop","d3","attr","svgWidth","svgHeight","barPadding","barPaddingMultiplier","barWidth","randomNum","barHeightMin","barHeightMax","bars","document","querySelectorAll","style","fill","slice","j","temp","getBubbleSortAnimation","key","getInsertionSortAnimation","getAnimation","playMerge","playBubble","playInsertion","beginIndex","setTimeout","bar1Index","bar2Index","bar1","bar2","color","newHeight","setAttribute","isSwap","index","bar1Height","getAttribute","bar2Height","animationType","animationNum","width","svgMargins","height","margin","y","transform","random","speedSliderStepSize","App","innerWidth","parseInt","input","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3950a339.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0d8e6a37.png\";","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport logo from \"../Assets/logo.png\";\nimport PropTypes from \"prop-types\";\n\nexport default class Header extends Component {\n  state = {\n    isDropDownActive: false,\n    selectedText: \"Merge Sort\",\n    selectedId: \"0\",\n    algorithmList: [\n      {\n        id: \"0\",\n        title: \"Merge Sort\",\n      },\n      {\n        id: \"1\",\n        title: \"Quick Sort\",\n      },\n      {\n        id: \"2\",\n        title: \"Bubble Sort\",\n      },\n      {\n        id: \"3\",\n        title: \"Insertion Sort\",\n      },\n    ],\n  };\n\n  arraySizeChanged = (e) => {\n    this.props.arraySizeChanged.bind(this, e.target.value)();\n  };\n\n  sortingSpeedChanged = (e) => {\n    this.props.sortingSpeedChanged.bind(this, e.target.value)();\n  };\n\n  mouseOverSelectBox = (e) => {\n    this.setState({ isDropDownActive: true });\n  };\n\n  mouseOutSelectBox = (e) => {\n    this.setState({ isDropDownActive: false });\n  };\n\n  algorithmSelected = (title, id) => {\n    this.setState({\n      selectedText: title,\n      selectedId: id,\n      isDropDownActive: false,\n    });\n    this.props.algorithmChanged.bind(this, id)();\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.props.playAndPauseClicked.bind(this, setTo)();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"logo\">\n          <img id=\"logoGif\" src={logo} />\n        </div>\n        <div className=\"controls\">\n          <div className=\"speed-control\">\n            <div className=\"title\">Sorting Speed</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max={this.props.speedSliderStepsCount}\n                defaultValue={this.props.speedSliderDefault}\n                step=\"1\"\n                onInput={this.sortingSpeedChanged}\n              />\n            </div>\n          </div>\n          <div className=\"size-control\">\n            <div className=\"title\">Array Size</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min={this.props.sliderMin}\n                max={this.props.sliderMax}\n                defaultValue={this.props.sizeSliderDefault}\n                step=\"1\"\n                onInput={this.arraySizeChanged}\n              />\n            </div>\n          </div>\n          <div className=\"algorithm-control\">\n            <div\n              className=\"select-box\"\n              onMouseOver={this.mouseOverSelectBox}\n              onMouseOut={this.mouseOutSelectBox}\n            >\n              <div\n                className={\n                  this.state.isDropDownActive\n                    ? \"options-container active\"\n                    : \"options-container\"\n                }\n              >\n                {this.state.algorithmList.map((option) => (\n                  <div\n                    key={option.id}\n                    className=\"option\"\n                    onClick={this.algorithmSelected.bind(\n                      this,\n                      option.title,\n                      option.id\n                    )}\n                  >\n                    <input\n                      type=\"radio\"\n                      className=\"radio\"\n                      id={option.id}\n                      name=\"category\"\n                    />\n                    <label htmlFor={option.id}>{option.title}</label>\n                  </div>\n                ))}\n              </div>\n              <div className=\"selected\">{this.state.selectedText}</div>\n            </div>\n          </div>\n          <button\n            className={this.props.isPlaying ? \"button playing\" : \"button\"}\n            onClick={this.playAndPauseClicked.bind(this, !this.props.isPlaying)}\n          ></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  arraySizeChanged: PropTypes.func.isRequired,\n  sortingSpeedChanged: PropTypes.func.isRequired,\n  algorithmChanged: PropTypes.func.isRequired,\n  sliderMax: PropTypes.number.isRequired,\n  sliderMin: PropTypes.number.isRequired,\n  sizeSliderDefault: PropTypes.number.isRequired,\n  speedSliderDefault: PropTypes.number.isRequired,\n  speedSliderStepsCount: PropTypes.number.isRequired,\n  playAndPauseClicked: PropTypes.func.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n};\n","import { sort } from \"d3\";\n\n// Merge Sort\nexport function getMergeSortAnimation(array, startIndex, size, animations) {\n  if (size > 1) {\n    const leftArraySize = Math.floor(size / 2);\n    const rightArraySize = size - leftArraySize;\n\n    getMergeSortAnimation(array, startIndex, leftArraySize, animations);\n    getMergeSortAnimation(\n      array,\n      startIndex + leftArraySize,\n      rightArraySize,\n      animations\n    );\n    merge(array, startIndex, leftArraySize, rightArraySize, animations);\n  }\n}\n\nconst merge = (\n  array,\n  startIndex,\n  leftArraySize,\n  rightArraySize,\n  animations\n) => {\n  var tempArr = [];\n  var copied = 0;\n  var leftCopied = 0;\n  var rightCopied = 0;\n\n  while (leftCopied < leftArraySize && rightCopied < rightArraySize) {\n    // Add comparison animation\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    if (\n      array[startIndex + leftCopied] <\n      array[startIndex + leftArraySize + rightCopied]\n    ) {\n      // Add override animation\n      animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n      animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n      tempArr[copied++] = array[startIndex + leftCopied++];\n    } else {\n      // Add override animation\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftArraySize + rightCopied],\n      ]);\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftArraySize + rightCopied],\n      ]);\n      tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n    }\n  }\n\n  while (leftCopied < leftArraySize) {\n    animations.push([startIndex + leftCopied, startIndex + leftCopied]);\n    animations.push([startIndex + leftCopied, startIndex + leftCopied]);\n    animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n    animations.push([startIndex + copied, array[startIndex + leftCopied]]);\n    tempArr[copied++] = array[startIndex + leftCopied++];\n  }\n\n  while (rightCopied < rightArraySize) {\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftArraySize + rightCopied],\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftArraySize + rightCopied],\n    ]);\n    tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n  }\n\n  for (let i = 0; i < tempArr.length; i++) {\n    array[i + startIndex] = tempArr[i];\n  }\n};\n\n// Bubble Sort\nexport function getBubbleSortAnimation(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        const temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        animations.push([true, j]);\n        animations.push([true, j]);\n        animations.push([true, j]);\n      } else {\n        animations.push([false, j]);\n        animations.push([false, j]);\n        animations.push([false, j]);\n      }\n    }\n  }\n}\n\n// Insertion Sort\nexport function getInsertionSortAnimation(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    animations.push([0, 0, i]);\n    let key = array[i];\n    let j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      animations.push([1, 0, j]);\n      animations.push([1, 1, j]);\n      animations.push([1, 2, j]);\n      array[j + 1] = array[j];\n      j--;\n    }\n    array[j + 1] = key;\n    animations.push([2, 0, j]);\n    animations.push([2, 1, j]);\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {\n  getMergeSortAnimation,\n  getBubbleSortAnimation,\n  getInsertionSortAnimation,\n} from \"../SortingAlgorithms/Algorithms.js\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nexport default class SortingVisualizer extends Component {\n  state = {\n    array: [],\n    animations: [],\n    animationStartingIndex: 0,\n    timers: [],\n    segmentSize: 10,\n    barDefaultColor: \"rgb(78, 169, 255)\",\n    barCompareColor: \"rgb(255, 114, 20)\",\n    barComparePassedColor: \"green\",\n    barHighlightColor: \"red\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setUp();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.arrayLength !== this.props.arrayLength) {\n      this.setUp();\n    }\n    if (prevProps.isPlaying !== this.props.isPlaying) {\n      this.playAndPauseClicked(this.props.isPlaying);\n    }\n    if (prevProps.algorithmSelected !== this.props.algorithmSelected) {\n      this.setUp();\n    }\n    if (prevProps.sortingSpeed !== this.props.sortingSpeed) {\n      this.pausePlay();\n      this.startPlay();\n    }\n  }\n\n  setUp(completion = null) {\n    // clean up timers\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n\n    // set svg frame\n    d3.select(\"svg\")\n      .attr(\"width\", this.props.svgWidth)\n      .attr(\"height\", this.props.svgHeight);\n\n    // calculate bar parameters\n    this.setState({\n      barPadding:\n        (this.props.svgWidth / this.props.arrayLength) *\n        this.props.barPaddingMultiplier,\n      barWidth:\n        (this.props.svgWidth / this.props.arrayLength) *\n        (1 - this.props.barPaddingMultiplier),\n    });\n\n    // get random array\n    const array = [];\n    for (let i = 0; i < this.props.arrayLength; i++) {\n      array.push(randomNum(this.props.barHeightMin, this.props.barHeightMax));\n    }\n\n    // set array and clean up\n    this.setState(\n      {\n        array: array,\n        animations: [],\n        animationStartingIndex: 0,\n        timers: [],\n      },\n      completion\n    );\n\n    // clean up bar color\n    const bars = document.querySelectorAll(\"rect\");\n    for (let i = 0; i < bars.length; i++) {\n      bars[i].style.fill = this.state.barDefaultColor;\n    }\n  }\n\n  getAnimation() {\n    if (this.props.algorithmSelected === \"0\") {\n      getMergeSortAnimation(\n        this.state.array.slice(),\n        0,\n        this.state.array.length,\n        this.state.animations\n      );\n    } else if (this.props.algorithmSelected === \"1\") {\n      getMergeSortAnimation(\n        this.state.array.slice(),\n        0,\n        this.state.array.length,\n        this.state.animations\n      );\n    } else if (this.props.algorithmSelected === \"2\") {\n      getBubbleSortAnimation(this.state.array.slice(), this.state.animations);\n    } else {\n      getInsertionSortAnimation(\n        this.state.array.slice(),\n        this.state.animations\n      );\n    }\n  }\n\n  playAndPauseClicked(isPlaying) {\n    if (isPlaying) {\n      // Check if the animation is created already\n      if (this.state.animations.length === 0) {\n        // make animations\n        this.getAnimation();\n      } else {\n        // Sorting was paused\n        // If the sorting ended, restart\n        if (this.state.animationStartingIndex == this.state.animations.length) {\n          this.setUp(() => {\n            this.getAnimation();\n            // start sorting\n            this.startPlay();\n          });\n        }\n      }\n      // start sorting\n      this.startPlay();\n    } else {\n      // pause sort\n      this.pausePlay();\n    }\n  }\n\n  startPlay() {\n    if (this.props.algorithmSelected === \"0\") {\n      this.playMerge();\n    } else if (this.props.algorithmSelected === \"1\") {\n      this.playMerge();\n    } else if (this.props.algorithmSelected === \"2\") {\n      this.playBubble();\n    } else {\n      this.playInsertion();\n    }\n  }\n\n  pausePlay() {\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n  }\n\n  playMerge() {\n    // Start from where it left off\n    const beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const bars = document.querySelectorAll(\"rect\");\n          const isComparison = i % 4 !== 2 && i % 4 !== 3;\n          if (isComparison) {\n            const [bar1Index, bar2Index] = this.state.animations[i];\n            const bar1 = bars[bar1Index];\n            const bar2 = bars[bar2Index];\n            const color =\n              i % 4 === 0\n                ? this.state.barCompareColor\n                : this.state.barDefaultColor;\n            bar1.style.fill = color;\n            bar2.style.fill = color;\n          } else {\n            const [bar1Index, newHeight] = this.state.animations[i];\n            const bar1 = bars[bar1Index];\n            if (i % 4 === 2) {\n              bar1.style.fill = this.state.barHighlightColor;\n            } else {\n              bar1.style.fill = this.state.barDefaultColor;\n              bar1.setAttribute(\"height\", newHeight);\n              bar1.setAttribute(\"y\", this.props.svgHeight - newHeight);\n            }\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playMerge();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  playBubble() {\n    let beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const [isSwap, index] = this.state.animations[i];\n          const bars = document.querySelectorAll(\"rect\");\n          const bar1 = bars[index];\n          const bar2 = bars[index + 1];\n          if (i % 3 === 0) {\n            bar1.style.fill = this.state.barCompareColor;\n            bar2.style.fill = this.state.barCompareColor;\n          } else if (i % 3 === 1) {\n            if (isSwap) {\n              const bar1Height = bar1.getAttribute(\"height\");\n              const bar2Height = bar2.getAttribute(\"height\");\n              bar1.setAttribute(\"height\", bar2Height);\n              bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n              bar2.setAttribute(\"height\", bar1Height);\n              bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n            } else {\n              bar1.style.fill = this.state.barComparePassedColor;\n              bar2.style.fill = this.state.barComparePassedColor;\n            }\n          } else {\n            bar1.style.fill = this.state.barDefaultColor;\n            bar2.style.fill = this.state.barDefaultColor;\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playBubble();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  playInsertion() {\n    let beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const [animationType, animationNum, index] = this.state.animations[i];\n          const bars = document.querySelectorAll(\"rect\");\n          const bar1 = bars[index];\n          const bar2 = bars[index + 1];\n          if (animationType === 0) {\n            // highlight key bar\n            bar1.style.fill = this.state.barHighlightColor;\n          } else if (animationType === 1) {\n            if (animationNum === 0) {\n              // color bar\n              bar1.style.fill = this.state.barCompareColor;\n            } else if (animationNum === 1) {\n              // swap\n              const bar1Height = bar1.getAttribute(\"height\");\n              const bar2Height = bar2.getAttribute(\"height\");\n              bar1.setAttribute(\"height\", bar2Height);\n              bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n              bar2.setAttribute(\"height\", bar1Height);\n              bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n              bar1.style.fill = this.state.barHighlightColor;\n              bar2.style.fill = this.state.barCompareColor;\n            } else {\n              // color to default\n              bar1.style.fill = this.state.barDefaultColor;\n              bar2.style.fill = this.state.barDefaultColor;\n            }\n          } else {\n            if (animationNum === 0) {\n              // color bar\n              if (index >= 0) {\n                bar1.style.fill = this.state.barComparePassedColor;\n              }\n            } else {\n              // color back both bars\n              if (index >= 0) {\n                bar1.style.fill = this.state.barDefaultColor;\n              }\n              bar2.style.fill = this.state.barDefaultColor;\n            }\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playInsertion();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"arrayContainer\"\n          style={{\n            width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n          }}\n        >\n          <div\n            className=\"barContainer\"\n            style={{\n              width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n              height: this.props.svgHeight + this.props.svgMargins * 2 + \"px\",\n            }}\n          >\n            <svg\n              id=\"svg\"\n              style={{\n                margin: this.props.svgMargins + \"px\",\n              }}\n            >\n              {this.state.array.map((value, index) => (\n                <rect\n                  key={index}\n                  y={this.props.svgHeight - value}\n                  height={value}\n                  width={this.state.barWidth}\n                  transform={\n                    \"translate(\" +\n                    [(this.state.barWidth + this.state.barPadding) * index, 0] +\n                    \")\"\n                  }\n                ></rect>\n              ))}\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSortingVisualizer.propTypes = {\n  svgWidth: PropTypes.number.isRequired,\n  svgHeight: PropTypes.number.isRequired,\n  svgMargins: PropTypes.number.isRequired,\n  barHeightMin: PropTypes.number.isRequired,\n  barHeightMax: PropTypes.number.isRequired,\n  barPaddingMultiplier: PropTypes.number.isRequired,\n  arrayLength: PropTypes.number.isRequired,\n  sortingSpeed: PropTypes.number.isRequired,\n  algorithmSelected: PropTypes.string.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n  pausePlay: PropTypes.func.isRequired,\n};\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nconst svgHeight = 400;\nconst svgMargins = 15;\nconst barHeightMin = 5;\nconst barHeightMax = svgHeight - 15;\nconst barPaddingMultiplier = 1 / 5;\nconst barMinWidth = 5;\nconst minSpeed = 10;\nconst maxSpeed = 200;\nconst speedSliderStepsCount = 50;\nconst speedSliderStepSize = (maxSpeed - minSpeed) / speedSliderStepsCount;\n\nexport default class App extends Component {\n  state = {\n    svgWidth: window.innerWidth - 100,\n    sliderMax: [window.innerWidth - 100] / barMinWidth,\n    sliderMin: 10,\n    sortingSpeed:\n      (speedSliderStepsCount - Math.floor(speedSliderStepsCount * 0.75)) *\n        speedSliderStepSize +\n      minSpeed,\n    arrayLength: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 3\n    ),\n    sizeSliderDefault: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 3\n    ),\n    speedSliderDefault: Math.floor(speedSliderStepsCount * 0.85),\n    speedSliderStepSize: speedSliderStepSize,\n    speedSliderStepsCount: speedSliderStepsCount,\n    isPlaying: false,\n    algorithmSelected: \"0\",\n  };\n\n  arraySizeChanged = (size) => {\n    this.pausePlay();\n    this.setState({\n      arrayLength: parseInt(size),\n    });\n  };\n\n  sortingSpeedChanged = (input) => {\n    this.setState({\n      sortingSpeed: Math.floor(\n        (speedSliderStepsCount - input) * speedSliderStepSize + minSpeed\n      ),\n    });\n  };\n\n  algorithmChanged = (id) => {\n    if (id !== this.state.algorithmSelected) {\n      this.setState({\n        algorithmSelected: id,\n        isPlaying: false,\n      });\n    }\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.setState({\n      isPlaying: setTo,\n    });\n  };\n\n  pausePlay = () => {\n    this.setState({\n      isPlaying: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          arraySizeChanged={this.arraySizeChanged}\n          sortingSpeedChanged={this.sortingSpeedChanged}\n          algorithmChanged={this.algorithmChanged}\n          sliderMax={this.state.sliderMax}\n          sliderMin={this.state.sliderMin}\n          sizeSliderDefault={this.state.sizeSliderDefault}\n          speedSliderDefault={this.state.speedSliderDefault}\n          speedSliderStepsCount={this.state.speedSliderStepsCount}\n          playAndPauseClicked={this.playAndPauseClicked}\n          isPlaying={this.state.isPlaying}\n        />\n        <SortingVisualizer\n          svgWidth={this.state.svgWidth}\n          svgHeight={svgHeight}\n          svgMargins={svgMargins}\n          barHeightMin={barHeightMin}\n          barHeightMax={barHeightMax}\n          barPaddingMultiplier={barPaddingMultiplier}\n          arrayLength={this.state.arrayLength}\n          sortingSpeed={this.state.sortingSpeed}\n          algorithmSelected={this.state.algorithmSelected}\n          isPlaying={this.state.isPlaying}\n          pausePlay={this.pausePlay}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n    <React.StrictMode>\n    <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n); "],"sourceRoot":""}