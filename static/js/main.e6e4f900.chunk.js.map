{"version":3,"sources":["Assets/logo.png","Header/Header.jsx","SortingAlgorithms/Algorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","index.js"],"names":["Header","state","isDropDownActive","selectedText","selectedId","algorithmList","id","title","arraySizeChanged","e","props","bind","target","value","sortingSpeedChanged","mouseOverSelectBox","setState","mouseOutSelectBox","algorithmSelected","algorithmChanged","playAndPauseClicked","setTo","className","src","logo","type","min","max","this","speedSliderStepsCount","defaultValue","speedSliderDefault","step","onInput","sliderMin","sliderMax","sizeSliderDefault","onMouseOver","onMouseOut","map","option","onClick","name","htmlFor","isPlaying","Component","getMergeSortAnimation","array","startIndex","size","animations","leftArraySize","Math","floor","rightArraySize","merge","tempArr","copied","leftCopied","rightCopied","isLastMerge","length","push","i","getQuickSortAnimation","low","high","pi","partition","pivot","j","temp","SortingVisualizer","animationStartingIndex","timers","segmentSize","barDefaultColor","barOrange","barGreen","barRed","barYellow","barPurple","barSorted","myRef","React","createRef","setUp","prevProps","arrayLength","sortingSpeed","pausePlay","startPlay","completion","window","clearTimeout","pop","d3","attr","svgWidth","svgHeight","barPadding","barPaddingMultiplier","barWidth","randomNum","barHeightMin","barHeightMax","bars","document","querySelectorAll","style","fill","slice","isSwap","isSorted","getBubbleSortAnimation","key","getInsertionSortAnimation","getAnimation","playMerge","playQuick","playBubble","playInsertion","beginIndex","setTimeout","bar1Index","bar2Index","bar1","bar2","color1","color2","newHeight","setAttribute","index","bar1Height","getAttribute","bar2Height","animationType","animationNum","colorType","color","index1","index2","bar1Color","bar2Color","forEach","bar","width","svgMargins","height","margin","y","transform","random","barMinWidth","speedSliderStepSize","App","innerWidth","parseInt","input","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6e4f900.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0d8e6a37.png\";","import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport logo from \"../Assets/logo.png\";\nimport PropTypes from \"prop-types\";\n\nexport default class Header extends Component {\n  state = {\n    isDropDownActive: false,\n    selectedText: \"Merge Sort\",\n    selectedId: \"0\",\n    algorithmList: [\n      {\n        id: \"0\",\n        title: \"Merge Sort\",\n      },\n      {\n        id: \"1\",\n        title: \"Quick Sort\",\n      },\n      {\n        id: \"2\",\n        title: \"Bubble Sort\",\n      },\n      {\n        id: \"3\",\n        title: \"Insertion Sort\",\n      },\n    ],\n  };\n\n  arraySizeChanged = (e) => {\n    this.props.arraySizeChanged.bind(this, e.target.value)();\n  };\n\n  sortingSpeedChanged = (e) => {\n    this.props.sortingSpeedChanged.bind(this, e.target.value)();\n  };\n\n  mouseOverSelectBox = (e) => {\n    this.setState({ isDropDownActive: true });\n  };\n\n  mouseOutSelectBox = (e) => {\n    this.setState({ isDropDownActive: false });\n  };\n\n  algorithmSelected = (title, id) => {\n    this.setState({\n      selectedText: title,\n      selectedId: id,\n      isDropDownActive: false,\n    });\n    this.props.algorithmChanged.bind(this, id)();\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.props.playAndPauseClicked.bind(this, setTo)();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"logo\">\n          <img id=\"logoGif\" src={logo} />\n        </div>\n        <div className=\"controls\">\n          <div className=\"speed-control\">\n            <div className=\"title\">Sorting Speed</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max={this.props.speedSliderStepsCount}\n                defaultValue={this.props.speedSliderDefault}\n                step=\"1\"\n                onInput={this.sortingSpeedChanged}\n              />\n            </div>\n          </div>\n          <div className=\"size-control\">\n            <div className=\"title\">Array Size</div>\n            <div className=\"slider\">\n              <input\n                type=\"range\"\n                min={this.props.sliderMin}\n                max={this.props.sliderMax}\n                defaultValue={this.props.sizeSliderDefault}\n                step=\"1\"\n                onInput={this.arraySizeChanged}\n              />\n            </div>\n          </div>\n          <div className=\"algorithm-control\">\n            <div\n              className=\"select-box\"\n              onMouseOver={this.mouseOverSelectBox}\n              onMouseOut={this.mouseOutSelectBox}\n            >\n              <div\n                className={\n                  this.state.isDropDownActive\n                    ? \"options-container active\"\n                    : \"options-container\"\n                }\n              >\n                {this.state.algorithmList.map((option) => (\n                  <div\n                    key={option.id}\n                    className=\"option\"\n                    onClick={this.algorithmSelected.bind(\n                      this,\n                      option.title,\n                      option.id\n                    )}\n                  >\n                    <input\n                      type=\"radio\"\n                      className=\"radio\"\n                      id={option.id}\n                      name=\"category\"\n                    />\n                    <label htmlFor={option.id}>{option.title}</label>\n                  </div>\n                ))}\n              </div>\n              <div className=\"selected\">{this.state.selectedText}</div>\n            </div>\n          </div>\n          <button\n            className={this.props.isPlaying ? \"button playing\" : \"button\"}\n            onClick={this.playAndPauseClicked.bind(this, !this.props.isPlaying)}\n          ></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  arraySizeChanged: PropTypes.func.isRequired,\n  sortingSpeedChanged: PropTypes.func.isRequired,\n  algorithmChanged: PropTypes.func.isRequired,\n  sliderMax: PropTypes.number.isRequired,\n  sliderMin: PropTypes.number.isRequired,\n  sizeSliderDefault: PropTypes.number.isRequired,\n  speedSliderDefault: PropTypes.number.isRequired,\n  speedSliderStepsCount: PropTypes.number.isRequired,\n  playAndPauseClicked: PropTypes.func.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n};\n","import { sort } from \"d3\";\n\n// Merge Sort\nexport function getMergeSortAnimation(array, startIndex, size, animations) {\n  if (size > 1) {\n    const leftArraySize = Math.floor(size / 2);\n    const rightArraySize = size - leftArraySize;\n\n    getMergeSortAnimation(array, startIndex, leftArraySize, animations);\n    getMergeSortAnimation(\n      array,\n      startIndex + leftArraySize,\n      rightArraySize,\n      animations\n    );\n    merge(array, startIndex, leftArraySize, rightArraySize, animations);\n  }\n}\n\nconst merge = (\n  array,\n  startIndex,\n  leftArraySize,\n  rightArraySize,\n  animations\n) => {\n  var tempArr = [];\n  var copied = 0;\n  var leftCopied = 0;\n  var rightCopied = 0;\n  const isLastMerge = rightArraySize + leftArraySize === array.length;\n\n  while (leftCopied < leftArraySize && rightCopied < rightArraySize) {\n    // Add comparison animation\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftArraySize + rightCopied,\n      isLastMerge,\n    ]);\n    if (\n      array[startIndex + leftCopied] <\n      array[startIndex + leftArraySize + rightCopied]\n    ) {\n      // Add override animation\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftCopied],\n        isLastMerge,\n      ]);\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftCopied],\n        isLastMerge,\n      ]);\n      tempArr[copied++] = array[startIndex + leftCopied++];\n    } else {\n      // Add override animation\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftArraySize + rightCopied],\n        isLastMerge,\n      ]);\n      animations.push([\n        startIndex + copied,\n        array[startIndex + leftArraySize + rightCopied],\n        isLastMerge,\n      ]);\n      tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n    }\n  }\n\n  while (leftCopied < leftArraySize) {\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftCopied,\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + leftCopied,\n      startIndex + leftCopied,\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftCopied],\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftCopied],\n      isLastMerge,\n    ]);\n    tempArr[copied++] = array[startIndex + leftCopied++];\n  }\n\n  while (rightCopied < rightArraySize) {\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + leftArraySize + rightCopied,\n      startIndex + leftArraySize + rightCopied,\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftArraySize + rightCopied],\n      isLastMerge,\n    ]);\n    animations.push([\n      startIndex + copied,\n      array[startIndex + leftArraySize + rightCopied],\n      isLastMerge,\n    ]);\n    tempArr[copied++] = array[startIndex + leftArraySize + rightCopied++];\n  }\n\n  for (let i = 0; i < tempArr.length; i++) {\n    array[i + startIndex] = tempArr[i];\n  }\n};\n\n// Bubble Sort\nexport function getBubbleSortAnimation(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      let isSwap;\n      let isSorted = false;\n      if (array[j] > array[j + 1]) {\n        const temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        isSwap = true;\n      } else {\n        isSwap = false;\n      }\n      if (j === array.length - i - 2) {\n        isSorted = true;\n      }\n      animations.push([false, j]);\n      animations.push([isSwap, j]);\n      animations.push([isSorted, j]);\n    }\n  }\n  animations.push([true, 0]);\n}\n\n// Insertion Sort\nexport function getInsertionSortAnimation(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    animations.push([0, 0, i]);\n    let key = array[i];\n    let j = i - 1;\n    while (j >= 0 && array[j] > key) {\n      animations.push([1, 0, j]);\n      animations.push([1, 1, j]);\n      animations.push([1, 2, j]);\n      array[j + 1] = array[j];\n      j--;\n    }\n    array[j + 1] = key;\n    animations.push([2, 0, j]);\n    animations.push([2, 1, j]);\n  }\n}\n\n// Quick Sort\nexport function getQuickSortAnimation(array, low, high, animations) {\n  if (low < high) {\n    let pi = partition(array, low, high, animations);\n    getQuickSortAnimation(array, low, pi - 1, animations);\n    getQuickSortAnimation(array, pi + 1, high, animations);\n  } else if (low === high) {\n    animations.push([0, 3, high]);\n  }\n}\n\nconst partition = (array, low, high, animations) => {\n  let pivot = array[high];\n  // Color pivot\n  animations.push([0, 0, high]);\n  let i = low - 1;\n  for (let j = low; j <= high - 1; j++) {\n    if (array[j] < pivot) {\n      // color\n      animations.push([0, 1, j]);\n      i++;\n      if (i != j) {\n        // swap\n        animations.push([1, i, j]);\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    } else {\n      // color\n      animations.push([0, 2, j]);\n    }\n  }\n  // swap\n  animations.push([1, i + 1, high]);\n  // De-color\n  animations.push([2, -1, -1]);\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  return i + 1;\n};\n\nconst assertEqualsArray = (original, sorted) => {\n  let correct = original.slice().sort();\n  if (correct.length !== sorted.length) {\n    return false;\n  }\n  correct.every((element, i) => {\n    if (element !== sorted[i]) {\n      return false;\n    }\n  });\n  return true;\n};\n","import React, { Component } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {\n  getMergeSortAnimation,\n  getBubbleSortAnimation,\n  getInsertionSortAnimation,\n  getQuickSortAnimation,\n} from \"../SortingAlgorithms/Algorithms.js\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\n\nexport default class SortingVisualizer extends Component {\n  state = {\n    array: [],\n    animations: [],\n    animationStartingIndex: 0,\n    timers: [],\n    segmentSize: 1,\n    barDefaultColor: \"rgb(78, 169, 255)\",\n    barOrange: \"rgb(255, 114, 20)\",\n    barGreen: \"green\",\n    barRed: \"red\",\n    barYellow: \"yellow\",\n    barPurple: \"purple\",\n    barSorted: \"rgb(36, 80, 166)\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setUp();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.arrayLength !== this.props.arrayLength) {\n      this.setUp();\n    }\n    if (prevProps.isPlaying !== this.props.isPlaying) {\n      this.playAndPauseClicked(this.props.isPlaying);\n    }\n    if (prevProps.algorithmSelected !== this.props.algorithmSelected) {\n      this.setUp();\n    }\n    if (prevProps.sortingSpeed !== this.props.sortingSpeed) {\n      if (this.props.isPlaying) {\n        this.pausePlay();\n        this.startPlay();\n      }\n    }\n  }\n\n  setUp(completion = null) {\n    // clean up timers\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n\n    // set svg frame\n    d3.select(\"svg\")\n      .attr(\"width\", this.props.svgWidth)\n      .attr(\"height\", this.props.svgHeight);\n\n    // calculate bar parameters\n    this.setState({\n      barPadding:\n        (this.props.svgWidth / this.props.arrayLength) *\n        this.props.barPaddingMultiplier,\n      barWidth:\n        (this.props.svgWidth / this.props.arrayLength) *\n        (1 - this.props.barPaddingMultiplier),\n    });\n\n    // get random array\n    const array = [];\n    for (let i = 0; i < this.props.arrayLength; i++) {\n      array.push(randomNum(this.props.barHeightMin, this.props.barHeightMax));\n    }\n\n    // set array and clean up\n    this.setState(\n      {\n        array: array,\n        animations: [],\n        animationStartingIndex: 0,\n        timers: [],\n      },\n      completion\n    );\n\n    // clean up bar color\n    const bars = document.querySelectorAll(\"rect\");\n    for (let i = 0; i < bars.length; i++) {\n      bars[i].style.fill = this.state.barDefaultColor;\n    }\n  }\n\n  getAnimation() {\n    if (this.props.algorithmSelected === \"0\") {\n      getMergeSortAnimation(\n        this.state.array.slice(),\n        0,\n        this.state.array.length,\n        this.state.animations\n      );\n    } else if (this.props.algorithmSelected === \"1\") {\n      getQuickSortAnimation(\n        this.state.array.slice(),\n        0,\n        this.state.array.length - 1,\n        this.state.animations\n      );\n    } else if (this.props.algorithmSelected === \"2\") {\n      getBubbleSortAnimation(this.state.array.slice(), this.state.animations);\n    } else {\n      getInsertionSortAnimation(\n        this.state.array.slice(),\n        this.state.animations\n      );\n    }\n  }\n\n  playAndPauseClicked(isPlaying) {\n    if (isPlaying) {\n      // Check if the animation is created already\n      if (this.state.animations.length === 0) {\n        // make animations\n        this.getAnimation();\n      } else {\n        // Sorting was paused\n        // If the sorting ended, restart\n        if (this.state.animationStartingIndex == this.state.animations.length) {\n          this.setUp(() => {\n            this.getAnimation();\n            // start sorting\n            this.startPlay();\n          });\n        }\n      }\n      // start sorting\n      this.startPlay();\n    } else {\n      // pause sort\n      this.pausePlay();\n    }\n  }\n\n  startPlay() {\n    if (this.props.algorithmSelected === \"0\") {\n      this.playMerge();\n    } else if (this.props.algorithmSelected === \"1\") {\n      this.playQuick();\n    } else if (this.props.algorithmSelected === \"2\") {\n      this.playBubble();\n    } else {\n      this.playInsertion();\n    }\n  }\n\n  pausePlay() {\n    for (let i = this.state.timers.length - 1; i >= 0; i--) {\n      window.clearTimeout(this.state.timers[i]);\n      this.state.timers.pop();\n    }\n  }\n\n  playMerge() {\n    // Start from where it left off\n    const beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const bars = document.querySelectorAll(\"rect\");\n          const isComparison = i % 4 !== 2 && i % 4 !== 3;\n          if (isComparison) {\n            const [bar1Index, bar2Index, isLastMerge] = this.state.animations[\n              i\n            ];\n            const bar1 = bars[bar1Index];\n            const bar2 = bars[bar2Index];\n            const color1 =\n              i % 4 === 0\n                ? this.state.barOrange\n                : isLastMerge\n                ? this.state.barSorted\n                : this.state.barDefaultColor;\n            const color2 =\n              i % 4 === 0 ? this.state.barOrange : this.state.barDefaultColor;\n            bar1.style.fill = color1;\n            bar2.style.fill = bar1Index === bar2Index ? color1 : color2;\n          } else {\n            const [bar1Index, newHeight, isLastMerge] = this.state.animations[\n              i\n            ];\n            const bar1 = bars[bar1Index];\n            if (i % 4 === 2) {\n              bar1.style.fill = this.state.barRed;\n            } else {\n              bar1.style.fill = isLastMerge\n                ? this.state.barSorted\n                : this.state.barDefaultColor;\n              bar1.setAttribute(\"height\", newHeight);\n              bar1.setAttribute(\"y\", this.props.svgHeight - newHeight);\n            }\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playMerge();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  playBubble() {\n    let beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const index = this.state.animations[i][1];\n          const bars = document.querySelectorAll(\"rect\");\n          const bar1 = bars[index];\n          const bar2 = bars[index + 1];\n          if (i % 3 === 0) {\n            const isLast = this.state.animations[i][0];\n            if (isLast) {\n              bar1.style.fill = this.state.barSorted;\n            } else {\n              bar1.style.fill = this.state.barOrange;\n              bar2.style.fill = this.state.barOrange;\n            }\n          } else if (i % 3 === 1) {\n            const isSwap = this.state.animations[i][0];\n            if (isSwap) {\n              const bar1Height = bar1.getAttribute(\"height\");\n              const bar2Height = bar2.getAttribute(\"height\");\n              bar1.setAttribute(\"height\", bar2Height);\n              bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n              bar2.setAttribute(\"height\", bar1Height);\n              bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n            } else {\n              bar1.style.fill = this.state.barGreen;\n              bar2.style.fill = this.state.barGreen;\n            }\n          } else {\n            const isSorted = this.state.animations[i][0];\n            if (!isSorted) {\n              bar2.style.fill = this.state.barDefaultColor;\n            } else {\n              bar2.style.fill = this.state.barSorted;\n            }\n            bar1.style.fill = this.state.barDefaultColor;\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playBubble();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  playInsertion() {\n    let beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const [animationType, animationNum, index] = this.state.animations[i];\n          const bars = document.querySelectorAll(\"rect\");\n          const bar1 = bars[index];\n          const bar2 = bars[index + 1];\n          if (animationType === 0) {\n            // highlight key bar\n            bar1.style.fill = this.state.barRed;\n          } else if (animationType === 1) {\n            if (animationNum === 0) {\n              // color bar\n              bar1.style.fill = this.state.barOrange;\n            } else if (animationNum === 1) {\n              // swap\n              const bar1Height = bar1.getAttribute(\"height\");\n              const bar2Height = bar2.getAttribute(\"height\");\n              bar1.setAttribute(\"height\", bar2Height);\n              bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n              bar2.setAttribute(\"height\", bar1Height);\n              bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n              bar1.style.fill = this.state.barRed;\n              bar2.style.fill = this.state.barOrange;\n            } else if (animationNum === 2) {\n              // color to sorted\n              bar1.style.fill = this.state.barSorted;\n              bar2.style.fill = this.state.barSorted;\n            }\n          } else {\n            if (animationNum === 0) {\n              // color bar\n              if (index >= 0) {\n                bar1.style.fill = this.state.barGreen;\n              }\n            } else {\n              // color back both bars\n              if (index >= 0) {\n                bar1.style.fill = this.state.barSorted;\n              }\n              bar2.style.fill = this.state.barSorted;\n            }\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playInsertion();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  playQuick() {\n    const beginIndex = this.state.animationStartingIndex;\n    for (\n      let i = beginIndex;\n      i < this.state.segmentSize + beginIndex &&\n      i < this.state.animations.length;\n      i++\n    ) {\n      this.state.timers.push(\n        setTimeout(() => {\n          const bars = document.querySelectorAll(\"rect\");\n          const animationType = this.state.animations[i][0];\n          if (animationType === 0) {\n            // color\n            const colorType = this.state.animations[i][1];\n            const index = this.state.animations[i][2];\n            const bar1 = bars[index];\n            let color = this.state.barDefaultColor;\n            if (colorType === 0) {\n              color = this.state.barYellow;\n            } else if (colorType === 1) {\n              color = this.state.barGreen;\n            } else if (colorType === 2) {\n              color = this.state.barPurple;\n            } else if (colorType === 3) {\n              color = this.state.barSorted;\n            }\n            bar1.style.fill = color;\n          } else if (animationType === 1) {\n            // swap\n            const index1 = this.state.animations[i][1];\n            const index2 = this.state.animations[i][2];\n            const bar1 = bars[index1];\n            const bar2 = bars[index2];\n            const bar1Height = bar1.getAttribute(\"height\");\n            const bar2Height = bar2.getAttribute(\"height\");\n            const bar1Color = bar1.style.fill;\n            const bar2Color = bar2.style.fill;\n            bar1.setAttribute(\"height\", bar2Height);\n            bar1.setAttribute(\"y\", this.props.svgHeight - bar2Height);\n            bar2.setAttribute(\"height\", bar1Height);\n            bar2.setAttribute(\"y\", this.props.svgHeight - bar1Height);\n            bar1.style.fill = bar2Color;\n            bar2.style.fill = bar1Color;\n          } else {\n            // de-color\n            bars.forEach((bar) => {\n              if (bar.style.fill === this.state.barYellow) {\n                bar.style.fill = this.state.barSorted;\n              } else if (\n                bar.style.fill !== this.state.barDefaultColor &&\n                bar.style.fill !== this.state.barSorted\n              ) {\n                bar.style.fill = this.state.barDefaultColor;\n              }\n            });\n          }\n          this.state.animationStartingIndex++;\n          if (\n            this.state.animationStartingIndex >= this.state.animations.length\n          ) {\n            this.props.pausePlay();\n          } else if (i >= this.state.segmentSize + beginIndex - 1) {\n            this.playQuick();\n          }\n        }, (i - beginIndex + 1) * this.props.sortingSpeed)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"arrayContainer\"\n          style={{\n            width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n          }}\n        >\n          <div\n            className=\"barContainer\"\n            style={{\n              width: this.props.svgWidth + this.props.svgMargins * 2 + \"px\",\n              height: this.props.svgHeight + this.props.svgMargins * 2 + \"px\",\n            }}\n          >\n            <svg\n              id=\"svg\"\n              style={{\n                margin: this.props.svgMargins + \"px\",\n              }}\n            >\n              {this.state.array.map((value, index) => (\n                <rect\n                  key={index}\n                  y={this.props.svgHeight - value}\n                  height={value}\n                  width={this.state.barWidth}\n                  transform={\n                    \"translate(\" +\n                    [(this.state.barWidth + this.state.barPadding) * index, 0] +\n                    \")\"\n                  }\n                ></rect>\n              ))}\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nSortingVisualizer.propTypes = {\n  svgWidth: PropTypes.number.isRequired,\n  svgHeight: PropTypes.number.isRequired,\n  svgMargins: PropTypes.number.isRequired,\n  barHeightMin: PropTypes.number.isRequired,\n  barHeightMax: PropTypes.number.isRequired,\n  barPaddingMultiplier: PropTypes.number.isRequired,\n  arrayLength: PropTypes.number.isRequired,\n  sortingSpeed: PropTypes.number.isRequired,\n  algorithmSelected: PropTypes.string.isRequired,\n  isPlaying: PropTypes.bool.isRequired,\n  pausePlay: PropTypes.func.isRequired,\n};\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nconst svgHeight = 400;\nconst svgMargins = 15;\nconst barHeightMin = 5;\nconst barHeightMax = svgHeight - 15;\nconst barPaddingMultiplier = 1 / 5;\nconst barMinWidth = 10;\nconst minSpeed = 10;\nconst maxSpeed = 150;\nconst speedSliderStepsCount = 50;\nconst speedSliderStepSize = (maxSpeed - minSpeed) / speedSliderStepsCount;\n\nexport default class App extends Component {\n  state = {\n    svgWidth: window.innerWidth - 100,\n    sliderMax: [window.innerWidth - 100] / barMinWidth,\n    sliderMin: 10,\n    sortingSpeed:\n      (speedSliderStepsCount - Math.floor(speedSliderStepsCount * 0.75)) *\n        speedSliderStepSize +\n      minSpeed,\n    arrayLength: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 2\n    ),\n    sizeSliderDefault: Math.floor(\n      (parseInt(10) + parseInt([window.innerWidth - 100] / barMinWidth)) / 2\n    ),\n    speedSliderDefault: Math.floor(speedSliderStepsCount * 0.85),\n    speedSliderStepSize: speedSliderStepSize,\n    speedSliderStepsCount: speedSliderStepsCount,\n    isPlaying: false,\n    algorithmSelected: \"0\",\n  };\n\n  arraySizeChanged = (size) => {\n    this.pausePlay();\n    this.setState({\n      arrayLength: parseInt(size),\n    });\n  };\n\n  sortingSpeedChanged = (input) => {\n    this.setState({\n      sortingSpeed: Math.floor(\n        (speedSliderStepsCount - input) * speedSliderStepSize + minSpeed\n      ),\n    });\n  };\n\n  algorithmChanged = (id) => {\n    if (id !== this.state.algorithmSelected) {\n      this.setState({\n        algorithmSelected: id,\n        isPlaying: false,\n      });\n    }\n  };\n\n  playAndPauseClicked = (setTo) => {\n    this.setState({\n      isPlaying: setTo,\n    });\n  };\n\n  pausePlay = () => {\n    this.setState({\n      isPlaying: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          arraySizeChanged={this.arraySizeChanged}\n          sortingSpeedChanged={this.sortingSpeedChanged}\n          algorithmChanged={this.algorithmChanged}\n          sliderMax={this.state.sliderMax}\n          sliderMin={this.state.sliderMin}\n          sizeSliderDefault={this.state.sizeSliderDefault}\n          speedSliderDefault={this.state.speedSliderDefault}\n          speedSliderStepsCount={this.state.speedSliderStepsCount}\n          playAndPauseClicked={this.playAndPauseClicked}\n          isPlaying={this.state.isPlaying}\n        />\n        <SortingVisualizer\n          svgWidth={this.state.svgWidth}\n          svgHeight={svgHeight}\n          svgMargins={svgMargins}\n          barHeightMin={barHeightMin}\n          barHeightMax={barHeightMax}\n          barPaddingMultiplier={barPaddingMultiplier}\n          arrayLength={this.state.arrayLength}\n          sortingSpeed={this.state.sortingSpeed}\n          algorithmSelected={this.state.algorithmSelected}\n          isPlaying={this.state.isPlaying}\n          pausePlay={this.pausePlay}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n    <React.StrictMode>\n    <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n); "],"sourceRoot":""}